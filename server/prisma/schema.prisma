// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String
  name         String?
  phoneNumber  String?
  dateOfBirth  DateTime?
  address      String?
  city         String?
  state        String?
  country      String?
  postalCode   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  banks        UserBank[]
  settings     Settings?
  transactions Transaction[]
  treasury     Treasury?
  entries      TreasuryEntry[]
  positions    InvestmentPosition[]
}

model UserBank {
  id            Int      @id @default(autoincrement())
  userId        Int
  provider      String // e.g. "mock" | "plaid" | "setu"
  accountNumber String
  status        String // "linked" | "revoked"
  linkedAt      DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Settings {
  id                Int      @id @default(autoincrement())
  userId            Int      @unique
  
  // Auto-save settings
  autoSaveRate      Float    @default(3.5) // Percentage of income to auto-save
  minThreshold      Int      @default(100) // Minimum amount to trigger auto-save
  roundUpsEnabled   Boolean  @default(true) // Enable/disable round-up savings
  
  // Investment preferences
  riskTolerance     String   @default("moderate") // low, moderate, high
  investmentGoal    String?  // short_term, medium_term, long_term
  autoInvest        Boolean  @default(true)
  
  // Notification preferences
  emailNotifications Boolean @default(true)
  pushNotifications Boolean @default(true)
  lowBalanceAlert   Boolean @default(true)
  weeklyReport      Boolean @default(true)
  
  // Security
  twoFactorAuth    Boolean  @default(false)
  biometricAuth    Boolean  @default(true)
  
  // Account settings
  currency         String   @default("INR")
  language         String   @default("en")
  theme            String   @default("system") // light, dark, system
  
  // Additional features
  weeklyTopUp      Int      @default(500) // Weekly savings goal
  monthlyGoal      Int?     // Optional monthly savings goal
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id])
  
  @@map("settings")
}

model Transaction {
  id                    Int      @id @default(autoincrement())
  userId                Int
  providerTransactionId String?  @unique
  type                  String // "credit" | "debit"
  amount                Int
  currency              String   @default("INR")
  description           String?
  occurredAt            DateTime @default(now())

  user    User            @relation(fields: [userId], references: [id])
  entries TreasuryEntry[]

  @@index([userId, occurredAt])
}

model Treasury {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  balance   Int      @default(0)
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model TreasuryEntry {
  id            Int      @id @default(autoincrement())
  userId        Int
  transactionId Int?
  kind          String // "save" | "invest" | "liquidate"
  amount        Int // positive for 'save' & 'liquidate'; store invest amount too for history
  description   String?
  createdAt     DateTime @default(now())

  // Optional investment context
  risk        String? // "high" | "low"
  units       Float?
  navAtInvest Float?

  user        User         @relation(fields: [userId], references: [id])
  transaction Transaction? @relation(fields: [transactionId], references: [id])

  @@index([userId, createdAt])
  @@index([userId, kind])
}

model InvestmentPosition {
  id          Int      @id @default(autoincrement())
  userId      Int
  risk        String // "high" | "low"
  units       Float
  amount      Int
  navAtInvest Float
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@index([userId, risk])
  @@index([userId, createdAt])
}

model InvestmentNav {
  id         Int      @id @default(autoincrement())
  risk       String   @unique // "high" | "low"
  currentNav Float
  updatedAt  DateTime @updatedAt
}
